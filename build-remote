#!/bin/sh

set -e

. `dirname "$0"`/build-scripts/functions

usage() {
  echo
  echo "Usage: build-remote [--wix-machine=<user@host>]"
  echo "                    [--cross-target=<target>]"
  echo "                    [--project=<project>]"
  echo "                    [--branch=<branch>]"
  echo "                    [--source=<url>]"
  echo "                    [--role=<hub|agent>]"
  echo "                    [--version=<version string>]"
  echo "                    [--test-machine=chroot]"
  echo "                    [--workdir=/opt/cfengine]"
  echo "                    [--full|--release|--debug|--docs|--release-and-debug]"
  echo "                    [-v|--verbose]"
  echo "                    <user@host>"
  echo
  echo "Project defaults to 'nova'"
  echo "Branch defaults to 'master', specify --branch=cp if you just want to do simple rsync from the source directories"
  echo "workdir defaults to '/var/cfengine'"
  echo "Build type defaults to quick. You may request a full build using --full"
  echo "Source defaults to git@github.com:cfengine/"
  echo
  echo "WiX machine and cross-compilation are not used by default"
  echo
}

opts() {
  OPTS=`getopt -o p:b:w:c:d:vht: --long project:,branch:,wix-machine:,cross-target:,workdir:,verbose,source:,role:,version:,full,release,debug,docs,release-and-debug,help,test-machine: -n build-remote -- "$@"`

  eval set -- "$OPTS"
  echo "$?"

  if [ $? != 0 ]; then
    usage
    exit 1
  fi

  DOCS=no
  PROJECT=nova
  BRANCH=master
  BUILD_TYPE=quick
  SOURCE=git@github.com:cfengine
  BUILD_NUMBER=${BUILD_NUMBER:-666}
  EXPLICIT_ROLE=
  TEST_MACHINE=${TEST_MACHINE:-}

  while true; do
    case "$1" in
      -p|--project)
        PROJECT="$2"
        shift 2;;
      -b|--branch)
        BRANCH="$2"
        shift 2;;
      -w|--wix-machine)
        WIX_MACHINE="$2"
        shift 2;;
      -c|--cross-target)
        CROSS_TARGET="$2"
        shift 2;;
      -d|--workdir)
        PREFIX="$2"
        shift 2;;
      -v|--verbose)
        VERBOSE=yes
        shift;;
      --full)
        BUILD_TYPE=full
        shift;;
      --release)
        BUILD_TYPE=release
        shift;;
      --debug)
        BUILD_TYPE=debug
        shift;;
	  --release-and-debug)
	    BUILD_TYPE=debug_and_release
		shift;;
      --docs)
        DOCS=yes
        shift;;
      --source)
        SOURCE="$2"
        shift 2;;
      --role)
	    EXPLICIT_ROLE="$2"
		shift 2;;
	  --version)
	    EXPLICIT_VERSION="$2"
		shift 2;;
      -h|--help)
        usage
        exit 0;;
      -t|--test-machine)
        TEST_MACHINE="$2"
        case "$TEST_MACHINE" in
          chroot)
            ;;
          *)
            echo "Only --test-machine=chroot is supported"
            exit 1
            ;;
        esac
        shift 2;;
      --)
        shift
        break;;
      *)
        echo "Internal error!"
        exit 1;;
    esac
  done
  echo "$PROJECT $BRANCH $HOST $BUILD_TYPE $SOURCE"
  if [ $# -ne 1 ]; then
    usage
    exit 1
  fi

  REPOSITORY=$PROJECT-$BRANCH
  HOST=$1

  export PROJECT BRANCH WIX_MACHINE CROSS_TARGET HOST BUILD_TYPE BUILD_NUMBER DOCS EXPLICIT_ROLE EXPLICIT_VERSION TEST_MACHINE PREFIX

  export SCHEDULER=$PROJECT-$BRANCH-localbuild
}

prepare_workdir() {
  mkdir -p "workdir-$PROJECT-$BRANCH-$HOST"
  rm -rf "workdir-$PROJECT-$BRANCH-$HOST"/*
  # In order for tail not to miss any output. If it doesn't exist, there is a small window between
  # when it is created and when tail discovers it, where output may be missed.
  touch "workdir-$PROJECT-$BRANCH-$HOST"/build-remote.log

  SCRIPT="$(readlink -f "$0")"
  AUTOBUILD_PATH="$(pwd)/workdir-$PROJECT-$BRANCH-$HOST/build/buildscripts"
  export AUTOBUILD_PATH
  cd "workdir-$PROJECT-$BRANCH-$HOST"

  checkout
}

checkout() {
  mkdir -p build
  rsync -avr --exclude='workdir-*' ../ build/buildscripts

  REPOS="core masterfiles"

  case "$PROJECT" in
     nova)
      REPOS="$REPOS nova design-center mission-portal"
  esac

  case "$PROJECT-$BRANCH" in
    community-master)
      git clone $SOURCE/core build/core
      git clone $SOURCE/masterfiles build/masterfiles
      (cd build/masterfiles && git checkout $VERSION) || false
      git clone $SOURCE/design-center build/design-center
      (cd build/design-center && git checkout $VERSION) || false
      ;;
    community-3.4.x)
      git clone $SOURCE/core build/core
      (cd build/core && git checkout 3.4.x) || false
     ;;
    community-3.3.x)
      git clone $SOURCE/core build/core
      (cd build/core && git checkout -b 3.3.x remotes/origin/3.3.x || git checkout 3.3.x) || false
      ;;
    community-3.4.*)
      VERSION=$BRANCH
      git clone $SOURCE/core build/core
      (cd build/core && git checkout $VERSION) || false
      ;;
    nova-2.2.2)
      VERSION=$BRANCH
      git clone $SOURCE/nova build/nova
      (cd build/nova && git checkout $VERSION) || false
      git clone $SOURCE/core build/core
      (cd build/core && git checkout 3.3.6) || false
      ;;
    nova-3.5.x)
      VERSION=$BRANCH
      git clone $SOURCE/nova build/nova
      (cd build/nova && git checkout $VERSION) || false
      git clone $SOURCE/core build/core
      (cd build/core && git checkout $VERSION) || false
      git clone $SOURCE/mission-portal build/mission-portal
      git clone $SOURCE/design-center build/design-center
      (cd build/design-center && git checkout $VERSION)
      ;;
    nova-2.2.*)
      VERSION=$BRANCH
      git clone $SOURCE/nova build/nova
      (cd build/nova && git checkout $VERSION) || false
      git clone $SOURCE/core build/core
      (cd build/core && git checkout -b 3.3.x remotes/origin/3.3.x || git checkout 3.3.x) || false
      ;;
    nova-master)
      git clone $SOURCE/core build/core
      git clone $SOURCE/enterprise build/enterprise
      git clone $SOURCE/nova build/nova
      git clone $SOURCE/mission-portal build/mission-portal
      git clone $SOURCE/design-center build/design-center
      git clone $SOURCE/masterfiles build/masterfiles
      ;;
    nova-3.6.x)
      VERSION=$BRANCH
      git clone $SOURCE/core build/core
       (cd build/core && git checkout $VERSION) || false
      git clone $SOURCE/nova build/nova
      (cd build/nova && git checkout $VERSION) || false
      git clone $SOURCE/enterprise build/enterprise
       (cd build/enterprise && git checkout $VERSION) || false
      git clone $SOURCE/mission-portal build/mission-portal
       (cd build/mission-portal && git checkout $VERSION) || false
      git clone $SOURCE/design-center build/design-center
       (cd build/design-center && git checkout $VERSION) || false
      git clone $SOURCE/masterfiles build/masterfiles
       (cd build/masterfiles && git checkout $VERSION)
       ;;
      
    nova-cp)
     rsync -avr --exclude='workdir-*' $AUTOBUILD_PATH/ build/buildscripts
     for d in core nova enterprise masterfiles design-center mission-portal; do
       rsync -avr $SOURCE/$d build
     done
      ;;

    nova-stable)
      git clone $SOURCE/core build/core
      (cd build/core && git checkout -b 3.4.x remotes/origin/3.4.x || git checkout 3.4.1n) || false
      git clone $SOURCE/nova build/nova
      (cd build/nova && git checkout -b 3.0.x remotes/origin/3.0.x || git checkout 3.0.0) || false
      git clone $SOURCE/mission-portal build/mission-portal
      (cd build/mission-portal && git checkout -b 3.0.x remotes/origin/3.0.x || git checkout 3.0.0) || false
      ;;
    *)
      for i in $REPOS;
         do
         git clone $SOURCE/$i build/$i
         (cd build/$i && git checkout -b $BRANCH remotes/origin/$BRANCH || git checkout $BRANCH) || false
      done
  esac
}

build_docs() {
  remote_script configure-docs
  remote_script compile
  remote_script upload-docs
}

build() {
  remote_script configure
  remote_script compile
  case "$BUILD_TYPE" in
    debug_and_release)
	  remote_script produce-debug-symbols
	  ;;
  esac

  #remote_script test
  remote_script package
  remote_script prepare-results

  local_script transfer-results
  local_script install-results
  local_script clean-results
}

common_build() {
  if [ "$VERBOSE" = "yes" ]; then
    tail -F --pid=$$ build-remote.log &
  fi

  local_script autogen
  local_script transfer-to-buildmachine
  remote_script build-environment-check
  remote_script clean-buildmachine
  remote_script install-dependencies

  case "$DOCS" in
    yes)
      build_docs;;
    no)
      build;;
  esac
}

opts "$@"
prepare_workdir
common_build
